// @ts-nocheck
// Supabase Edge Function: generate_sql
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —á–µ—Ä–µ–∑ OpenAI —Å —É—á—ë—Ç–æ–º –¥–∏–∞–ª–µ–∫—Ç–∞ (Postgres, MySQL, SQLite –∏ —Ç.–¥.)

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

// üîß –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
function buildSystemPrompt(dialect: string) {
  return [
    "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç SQL-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.",
    "–í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.",
    `–¢–µ–∫—É—â–∏–π SQL –¥–∏–∞–ª–µ–∫—Ç: ${dialect.toUpperCase()}.`,
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Å—Ö–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.",
    "–î–æ–±–∞–≤—å SAVEPOINT-–ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (DROP, DELETE, ALTER –∏ —Ç.–¥.).",
  ].join(" ");
}

// üîß –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è OpenAI
async function callOpenAI(nl: string, schemaText?: string, dialect = "postgres") {
  const apiKey = Deno.env.get("OPENAI_API_KEY");
  if (!apiKey) throw new Error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω");

  const prompt = `
–¢—ã SQL-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–ª–µ–∫—Ç–∞ ${dialect.toUpperCase()}.

–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç):
${schemaText || "(–ø—É—Å—Ç–æ)"}

–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"${nl}"

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –ø–æ–¥ —ç—Ç–æ—Ç –¥–∏–∞–ª–µ–∫—Ç.
–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–∏–∂–∞–π—à–∏–π –∞–Ω–∞–ª–æ–≥.
  `.trim();

  const resp = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      temperature: 0.1,
      top_p: 0.9,
      messages: [
        { role: "system", content: buildSystemPrompt(dialect) },
        { role: "user", content: prompt },
      ],
    }),
  });

  if (!resp.ok) {
    const text = await resp.text().catch(() => "");
    throw new Error(`OpenAI error ${resp.status}: ${text}`);
  }

  const data = await resp.json();
  const sql = data?.choices?.[0]?.message?.content?.trim() || "";
  const usage = data?.usage || {};
  if (!sql) throw new Error("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π SQL");

  return { sql, usage };
}

// üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
function detectDangerousOps(sql: string) {
  const tokens = ["DROP", "ALTER", "TRUNCATE", "DELETE", "UPDATE", "INSERT", "MERGE"];
  return tokens.filter((t) => new RegExp(`\\b${t}\\b`, "i").test(sql));
}

// üöß –û–±—ë—Ä—Ç–∫–∞ –≤ SAVEPOINT
function wrapWithSavepoint(sql: string, savepointName = "ai_guard") {
  return [
    "BEGIN;",
    `SAVEPOINT ${savepointName};`,
    sql,
    `ROLLBACK TO SAVEPOINT ${savepointName}; -- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–∫–∞—Ç`,
    "COMMIT;",
  ].join("\n");
}

// üß† –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Supabase Edge
Deno.serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    if (req.method !== "POST") {
      return new Response(JSON.stringify({ error: "Use POST" }), {
        status: 405,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      });
    }

    const payload = await req.json().catch(() => ({}));
    const nl: string = payload?.nl ?? "";
    const schema = payload?.schema ?? "";
    const dialect: string = payload?.dialect ?? "postgres";

    if (!nl || typeof nl !== "string") {
      return new Response(JSON.stringify({ error: "–ü–æ–ª–µ 'nl' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" }), {
        status: 400,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      });
    }

    const schemaText =
      typeof schema === "object" ? JSON.stringify(schema) : String(schema);

    const { sql, usage } = await callOpenAI(nl.trim(), schemaText, dialect);

    const dangers = detectDangerousOps(sql);
    const hasDanger = dangers.length > 0;

    const response = {
      sql,
      withSafety: hasDanger ? wrapWithSavepoint(sql) : sql,
      raw: sql,
      warnings: hasDanger
        ? [`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${dangers.join(", ")}`]
        : [],
      usage,
    };

    return new Response(JSON.stringify(response), {
      status: 200,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  } catch (e: any) {
    return new Response(
      JSON.stringify({ error: e?.message || String(e) }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});

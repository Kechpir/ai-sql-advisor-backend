// @ts-nocheck
// Supabase Edge Function: generate_sql
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —á–µ—Ä–µ–∑ OpenAI —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–µ–∫—Ç–∞
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};
function buildSystemPrompt(dialect) {
  return [
    "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç SQL-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.",
    `–¢–µ–∫—É—â–∏–π SQL –¥–∏–∞–ª–µ–∫—Ç: ${dialect.toUpperCase()}.`,
    "–í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Ö–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–∞–Ω—ã.",
    "–î–æ–±–∞–≤–ª—è–π SAVEPOINT-–ª–æ–≥–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (DROP, DELETE, ALTER –∏ —Ç.–¥.)."
  ].join(" ");
}
async function callOpenAI(nl, schemaText, dialect = "postgres") {
  const apiKey = Deno.env.get("OPENAI_API_KEY");
  if (!apiKey) throw new Error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω");
  const prompt = `
–¢—ã SQL-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–ª–µ–∫—Ç–∞ ${dialect.toUpperCase()}.
–°—Ö–µ–º–∞ –ë–î:
${schemaText || "(–ø—É—Å—Ç–æ)"}
–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"${nl}"
`.trim();
  const resp = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      temperature: 0.1,
      top_p: 0.9,
      messages: [
        {
          role: "system",
          content: buildSystemPrompt(dialect)
        },
        {
          role: "user",
          content: prompt
        }
      ]
    })
  });
  if (!resp.ok) {
    const text = await resp.text().catch(()=>"");
    throw new Error(`OpenAI error ${resp.status}: ${text}`);
  }
  const data = await resp.json();
  const sql = data?.choices?.[0]?.message?.content?.trim() || "";
  if (!sql) throw new Error("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π SQL");
  return {
    sql,
    usage: data?.usage || {}
  };
}
// ‚öôÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
function detectDangerousOps(sql) {
  const tokens = [
    "DROP",
    "ALTER",
    "TRUNCATE",
    "DELETE",
    "UPDATE",
    "INSERT",
    "MERGE"
  ];
  return tokens.filter((t)=>new RegExp(`\\b${t}\\b`, "i").test(sql));
}
// üß© –û–±—ë—Ä—Ç–∫–∞ SAVEPOINT (–¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
function wrapWithSavepoint(sql, savepointName = "ai_guard") {
  return [
    "BEGIN;",
    `SAVEPOINT ${savepointName};`,
    sql,
    `ROLLBACK TO SAVEPOINT ${savepointName}; -- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–∫–∞—Ç`,
    "COMMIT;"
  ].join("\n");
}
Deno.serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  try {
    if (req.method !== "POST") {
      return new Response(JSON.stringify({
        error: "Use POST"
      }), {
        status: 405,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders
        }
      });
    }
    const payload = await req.json().catch(()=>({}));
    const nl = payload?.nl ?? "";
    const schema = payload?.schema ?? "";
    const dialect = payload?.dialect ?? "postgres";
    if (!nl || typeof nl !== "string") {
      return new Response(JSON.stringify({
        error: "–ü–æ–ª–µ 'nl' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
      }), {
        status: 400,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders
        }
      });
    }
    const schemaText = typeof schema === "object" ? JSON.stringify(schema) : String(schema);
    const { sql, usage } = await callOpenAI(nl.trim(), schemaText, dialect);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const dangers = detectDangerousOps(sql);
    const hasDanger = dangers.length > 0;
    // ‚ö° –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ SAFEPOINT –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const finalSQL = hasDanger ? wrapWithSavepoint(sql) : sql;
    const response = {
      sql,
      withSafety: finalSQL,
      raw: sql,
      warnings: hasDanger ? [
        `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${dangers.join(", ")}`
      ] : [],
      usage
    };
    return new Response(JSON.stringify(response), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders
      }
    });
  } catch (e) {
    return new Response(JSON.stringify({
      error: e?.message || String(e)
    }), {
      status: 500,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders
      }
    });
  }
});
